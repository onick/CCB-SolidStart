// Verificaci√≥n de conexi√≥n a Supabase
require('dotenv').config();
const https = require('https');

console.log('üîó VERIFICANDO CONEXI√ìN A SUPABASE...\n');

// Usar variables de entorno del proyecto
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üìã Configuraci√≥n:');
console.log(`URL: ${supabaseUrl || 'No configurada'}`);
console.log(`Key: ${supabaseKey ? '‚úÖ Configurada' : '‚ùå No configurada'}\n`);

if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå ERROR: Variables de entorno no configuradas');
    console.log('üìù Aseg√∫rate de tener un archivo .env con:');
    console.log('   VITE_SUPABASE_URL=https://tu-proyecto.supabase.co');
    console.log('   VITE_SUPABASE_ANON_KEY=tu-clave-aqui');
    process.exit(1);
}

// Extraer solo el dominio de la URL
const urlObj = new URL(supabaseUrl);
const hostname = urlObj.hostname;

const options = {
    hostname: hostname,
    port: 443,
    path: '/rest/v1/',
    method: 'GET',
    headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json'
    }
};

console.log('üöÄ Intentando conectar...');

const req = https.request(options, (res) => {
    let data = '';
    res.on('data', (chunk) => data += chunk);
    res.on('end', () => {
        console.log(`üìä Status HTTP: ${res.statusCode}`);
        
        if (res.statusCode === 200) {
            console.log('üéâ ¬°CONEXI√ìN EXITOSA!');
            console.log('‚úÖ Tu base de datos de Supabase est√° funcionando correctamente');
            console.log('üîß Puedes usar todas las funcionalidades del proyecto');
        } else if (res.statusCode === 401) {
            console.log('‚ùå ERROR DE AUTENTICACI√ìN');
            console.log('üîë La clave API no es v√°lida o ha expirado');
            console.log('üìù Verifica tus credenciales en Supabase Dashboard');
        } else {
            console.log(`‚ùå ERROR: Status ${res.statusCode}`);
            console.log('üìÑ Respuesta:', data.substring(0, 200));
        }
    });
});

req.on('error', (error) => {
    console.log('‚ùå Error de conexi√≥n:', error.message);
    console.log('üåê Verifica tu conexi√≥n a internet');
});

req.setTimeout(10000, () => {
    console.log('‚è∞ Timeout: La conexi√≥n tard√≥ demasiado');
    req.destroy();
});

req.end(); 